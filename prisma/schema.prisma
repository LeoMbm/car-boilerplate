datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}


model SiteSettings {
  id                Int      @id @default(autoincrement())
  title             String
  description       String
  logo              String
  heroImage         String
  primaryColor      String
  secondaryColor    String
  borderRadius      String
  logoSize          Int
  socialMedia       Json
  featuredServices  Int[]    // Array de max 4 IDs de Service
  featuredVehicles  Int[]    // Array de max 6 IDs de Vehicle
  contactInfo       Json
  showLogo          Boolean
  showTitle         Boolean
  metadata          Json
  colorTemplate     String
  lightModeColors   Json
  darkModeColors    Json
}

model Service {
  id          Int      @id @default(autoincrement())
  icon        String
  title       String
  description String
  details     String[]
}

model Vehicle {
  id              Int      @id @default(autoincrement())
  name            String
  brand           String
  price           Float
  year            Int
  description     String
  mainImage       String   @default("/img/placeholder.svg")
  additionalImages String[] @default([])
  characteristics Json
}